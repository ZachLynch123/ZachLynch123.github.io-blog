---
layout: post
title:      "What is the Redux Flow?"
date:       2021-03-20 17:36:40 +0000
permalink:  what_is_the_redux_flow
---


First of all, what is Redux? Redux is a State Management Library for JavaScript that can be used with React, Angular, Vue, or even Vanilla JavaScript. It's used to keep data organized for multiple components and constantly updates those components when the data changes. It's mainly used for larger applications that have a lot of data or a lot of complex UI components that rely on said data and need to update when the data changes. After Redux is implimented in the project, the typical redux flow is as follows: The user clicks or interacts with a Component in some way. The component then dispatches (or sends out) an action to the reducer. The reducer then returns a new store object to reflect the changes. The container component sees the changes and passes those properties to it's child component to render said changes. 

Now that we know what Redux is, let's see how Redux does it's magic. First, Redux needs a store. A store is just a JavaScript Object, similar to state. The store is immutable, meaning it cannot be changed and every time we want to update the store with new data we'll have to return a new store object. React-redux has a createStore function that takes in the initial state(could just be an empty object) and a reducer(more on that in a bit). Next we need to wrap the App component in a Provider component (which is imported from the react-redux library) and pass it the store object. We wrapped our App in the Provider component and passed Provider our store object to allow our app to access the store.
More on that Reducer that was mentioned earlier. A Reducer takes in the store object and an action as arguments to create a new store object to reflect the changes brought on by the action. Reducers usually use switch/case statements to check the action's type (typically denoted by an all caps string) and based on the action's type, the reducer will then take the current store object, modify it, and return a new store object based on those changes. The components will recognize the changes being made and will re-render accordingly. 

Great! Now we have access to the store in our application and know what reducers and actions are, but how do we actually use this knowledge? Well, lets say we have a Container Component ToDoList with a child component ToDo.  The parent component sends every item on the list to be rendered by their child component, but there are no items on the list yet, let's add one using Redux! In order for the component to interact with the store, it needs to send an action to it's reducer. An action is just a JavaScript Object that has a type (typically denoted with an all caps string). Lets call it  "ADD TODO" and a payload of data, in our case it'll be a new item on a todo list. We pass this action to the reducer that looks for a case that matches the action's type. If it can't find a case that fit's the action, the default for the switch statement should always to just return the initial state. But for the sake of this blog post lets assume we have a case that matches the action type. What we do now is we create a new store object, take all the info that's already in the store's todo list, then we append the action's payload (in this case the todo list item) and return that new store object. 

And that's it! A simple example of Redux's flow. It may take some time to get your head wrapped around (I know it took me some time), but once you get it Redux is an extremely useful tool that makes state management a breeze. 
